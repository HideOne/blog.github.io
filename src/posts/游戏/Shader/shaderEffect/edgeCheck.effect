// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
// sobal算子
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        textureSize: {value: [1, 1]}
        mainTexture: { value: white, tooltip: "主帖图" }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif

  uniform commonVs {
    vec2 textureSize;
  };


  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 v_uv;
  out vec2 uv0;
  out vec2 uv1;
  out vec2 uv2;
  out vec2 uv3;
  out vec2 uv4;
  out vec2 uv5;
  out vec2 uv6;
  out vec2 uv7;
  out vec2 uv8;

  

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif
    v_uv = a_texCoord;
    v_uv.y = 1.0 - v_uv.y;
    vec2 texelSize = 1.0 / textureSize; 
    uv0 = v_uv + vec2(-1, 1) * texelSize;
    uv1 = v_uv + vec2(0, 1) * texelSize;
    uv2 = v_uv + vec2(1, 1) * texelSize;
    uv3 = v_uv + vec2(-1, 0) * texelSize;
    uv4 = v_uv + vec2(0, 0) * texelSize;
    uv5 = v_uv + vec2(1, 0) * texelSize;
    uv6 = v_uv + vec2(-1, -1) * texelSize;
    uv7 = v_uv + vec2(0, -1) * texelSize;
    uv8 = v_uv + vec2(1, -1) * texelSize;


    
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  uniform sampler2D mainTexture;

  in vec4 color;

  in vec2 uv0;
  in vec2 uv1;
  in vec2 uv2;
  in vec2 uv3;
  in vec2 uv4;
  in vec2 uv5;
  in vec2 uv6;
  in vec2 uv7; 
  in vec2 uv8;
  in vec2 v_uv;
  #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif
  float luminance(vec4 color) {
    return color.r * 0.2125 + color.g * 0.7154 + color.b * 0.0721;
  }

  float sobal() {
    float edgetX = 0.0;
    float edgety = 0.0; 
    float tpmColor = 0.0;
    tpmColor = luminance(texture(mainTexture, uv0));
    edgetX += tpmColor * -1.0;
    edgety += tpmColor * -1.0;

    tpmColor = luminance(texture(mainTexture, uv1));
    edgetX += tpmColor * 0.0;
    edgety += tpmColor * -2.0;
    

    
    tpmColor = luminance(texture(mainTexture, uv2));
    edgetX += tpmColor * 1.0;
    edgety += tpmColor * -1.0;
    

    
    tpmColor = luminance(texture(mainTexture, uv3));
    edgetX += tpmColor * -2.0;
    edgety += tpmColor * 0.0;



    tpmColor = luminance(texture(mainTexture, uv4));
    edgetX += tpmColor * 0.0;
    edgety += tpmColor * 0.0;



    tpmColor = luminance(texture(mainTexture, uv5));
    edgetX += tpmColor * 2.0;
    edgety += tpmColor * 0.0;




    tpmColor = luminance(texture(mainTexture, uv6));
    edgetX += tpmColor * -1.0;
    edgety += tpmColor * 1.0;



    tpmColor = luminance(texture(mainTexture, uv7));
    edgetX += tpmColor * 0.0;
    edgety += tpmColor * 2.0;



    tpmColor = luminance(texture(mainTexture, uv8));
    edgetX += tpmColor * 1.0;
    edgety += tpmColor * 1.0;

    return sqrt(edgetX * edgetX + edgety * edgety);

  }
  vec4 frag () {
    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);

    o = texture(mainTexture, v_uv);
    float edge =1.0- sobal();

    if(v_uv.x > 0.5) {
      o *= vec4(edge, edge, edge, 1.0); 
    }
    
    return o;
  }


}%
