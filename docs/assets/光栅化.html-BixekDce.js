const e=JSON.parse('{"key":"v-5bed312f","path":"/posts/%E6%B8%B8%E6%88%8F/games101/%E5%85%89%E6%A0%85%E5%8C%96.html","title":"光栅化","lang":"zh-CN","frontmatter":{"title":"光栅化","date":"2024-11-21T20:41:40.000Z","headerDepth":2,"description":"光栅化 把东西画在频幕上 光栅化（Rasterization）是计算机图形学中将矢量图形（如点、线、三角形等几何图形）转换为光栅图形（即像素网格）的过程。这个过程通常用于实时渲染和显示三维图形到二维屏幕上。以下是光栅化的基本步骤和概念： 顶点处理（Vertex Processing）：首先，图形的顶点数据（如位置、颜色、纹理坐标等）通过顶点着色器进行处理，进行变换和投影。 裁剪（Clipping）：将超出视口或视锥体外的部分裁剪掉，只保留需要绘制的部分。 三角形设置（Triangle Setup）：计算三角形的边缘方程，准备进行光栅化。 光栅化（Rasterization）： 采样：确定哪些像素（或片段）应该被绘制。通常使用边缘方程来判断一个像素是否在三角形内部。 插值：对顶点属性（如颜色、纹理坐标）进行插值，以确定每个像素的最终值。 片段着色（Fragment Shading）：每个片段（像素）通过片段着色器进行处理，这里可以进行纹理映射、光照计算等。 深度测试（Depth Testing）：决定哪些片段应该被绘制到屏幕上，通过比较深度缓冲区中的值。 混合（Blending）：如果有透明或半透明的对象，可能需要进行混合操作来正确渲染透明度。","head":[["meta",{"property":"og:url","content":"https://blog.vipfreevpn.top/posts/%E6%B8%B8%E6%88%8F/games101/%E5%85%89%E6%A0%85%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"光栅化"}],["meta",{"property":"og:description","content":"光栅化 把东西画在频幕上 光栅化（Rasterization）是计算机图形学中将矢量图形（如点、线、三角形等几何图形）转换为光栅图形（即像素网格）的过程。这个过程通常用于实时渲染和显示三维图形到二维屏幕上。以下是光栅化的基本步骤和概念： 顶点处理（Vertex Processing）：首先，图形的顶点数据（如位置、颜色、纹理坐标等）通过顶点着色器进行处理，进行变换和投影。 裁剪（Clipping）：将超出视口或视锥体外的部分裁剪掉，只保留需要绘制的部分。 三角形设置（Triangle Setup）：计算三角形的边缘方程，准备进行光栅化。 光栅化（Rasterization）： 采样：确定哪些像素（或片段）应该被绘制。通常使用边缘方程来判断一个像素是否在三角形内部。 插值：对顶点属性（如颜色、纹理坐标）进行插值，以确定每个像素的最终值。 片段着色（Fragment Shading）：每个片段（像素）通过片段着色器进行处理，这里可以进行纹理映射、光照计算等。 深度测试（Depth Testing）：决定哪些片段应该被绘制到屏幕上，通过比较深度缓冲区中的值。 混合（Blending）：如果有透明或半透明的对象，可能需要进行混合操作来正确渲染透明度。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T15:28:55.000Z"}],["meta",{"property":"article:author","content":"HideOne"}],["meta",{"property":"article:published_time","content":"2024-11-21T20:41:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-21T15:28:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"光栅化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-21T20:41:40.000Z\\",\\"dateModified\\":\\"2024-11-21T15:28:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HideOne\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Aliasing的成因","slug":"aliasing的成因","link":"#aliasing的成因","children":[]},{"level":3,"title":"Aliasing的具体表现","slug":"aliasing的具体表现","link":"#aliasing的具体表现","children":[]},{"level":3,"title":"Aliasing的原因","slug":"aliasing的原因","link":"#aliasing的原因","children":[]},{"level":3,"title":"Aliasing的解决方法","slug":"aliasing的解决方法","link":"#aliasing的解决方法","children":[{"level":4,"title":"1. 超采样（Supersampling）","slug":"_1-超采样-supersampling","link":"#_1-超采样-supersampling","children":[]},{"level":4,"title":"2. 多重采样抗锯齿（MSAA, Multi-Sample Anti-Aliasing）","slug":"_2-多重采样抗锯齿-msaa-multi-sample-anti-aliasing","link":"#_2-多重采样抗锯齿-msaa-multi-sample-anti-aliasing","children":[]},{"level":4,"title":"3. FXAA (Fast Approximate Anti-Aliasing)","slug":"_3-fxaa-fast-approximate-anti-aliasing","link":"#_3-fxaa-fast-approximate-anti-aliasing","children":[]},{"level":4,"title":"4. Temporal Anti-Aliasing (TAA)","slug":"_4-temporal-anti-aliasing-taa","link":"#_4-temporal-anti-aliasing-taa","children":[]},{"level":4,"title":"5. 采样率调整（Adaptive Sampling）","slug":"_5-采样率调整-adaptive-sampling","link":"#_5-采样率调整-adaptive-sampling","children":[]}]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1732202935000,"updatedTime":1732202935000,"contributors":[{"name":"HideOne","email":"844085696@qq.com","commits":1}]},"readingTime":{"minutes":11.76,"words":3529},"filePathRelative":"posts/游戏/games101/光栅化.md","localizedDate":"2024年11月22日","excerpt":"<h1> 光栅化</h1>\\n<ul>\\n<li>把东西画在频幕上</li>\\n</ul>\\n<p>光栅化（Rasterization）是计算机图形学中将矢量图形（如点、线、三角形等几何图形）转换为光栅图形（即像素网格）的过程。这个过程通常用于实时渲染和显示三维图形到二维屏幕上。以下是光栅化的基本步骤和概念：</p>\\n<ol>\\n<li>\\n<p><strong>顶点处理（Vertex Processing）</strong>：首先，图形的顶点数据（如位置、颜色、纹理坐标等）通过顶点着色器进行处理，进行变换和投影。</p>\\n</li>\\n<li>\\n<p><strong>裁剪（Clipping）</strong>：将超出视口或视锥体外的部分裁剪掉，只保留需要绘制的部分。</p>\\n</li>\\n<li>\\n<p><strong>三角形设置（Triangle Setup）</strong>：计算三角形的边缘方程，准备进行光栅化。</p>\\n</li>\\n<li>\\n<p><strong>光栅化（Rasterization）</strong>：</p>\\n<ul>\\n<li><strong>采样</strong>：确定哪些像素（或片段）应该被绘制。通常使用边缘方程来判断一个像素是否在三角形内部。</li>\\n<li><strong>插值</strong>：对顶点属性（如颜色、纹理坐标）进行插值，以确定每个像素的最终值。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>片段着色（Fragment Shading）</strong>：每个片段（像素）通过片段着色器进行处理，这里可以进行纹理映射、光照计算等。</p>\\n</li>\\n<li>\\n<p><strong>深度测试（Depth Testing）</strong>：决定哪些片段应该被绘制到屏幕上，通过比较深度缓冲区中的值。</p>\\n</li>\\n<li>\\n<p><strong>混合（Blending）</strong>：如果有透明或半透明的对象，可能需要进行混合操作来正确渲染透明度。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
