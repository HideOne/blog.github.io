import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-oEtxkI-I.js";const t="/assets/image-5-toUyElvg.png",p={},o=e('<h3 id="smoothstep" tabindex="-1"><a class="header-anchor" href="#smoothstep" aria-hidden="true">#</a> smoothstep</h3><ul><li>smoothstep可以用来生成0到1的平滑过渡值，它也叫平滑阶梯函数</li><li>smoothstep(edg0, edg1, x); edg0左边缘，edg1右边缘，使x在edg0和edg1区间内进行平滑处理。返回值在[0， 1]区间内，当x &gt; edg1时，返回1，当x &lt; edg0时，返回0，当x在edg0和edg1之间时，返回x <img src="'+t+`" alt="alt text" loading="lazy"></li></ul><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">float</span> <span class="token function">smoothstep</span><span class="token punctuation">(</span><span class="token keyword">float</span> t1<span class="token punctuation">,</span> <span class="token keyword">float</span> t2<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Scale, bias and saturate x to 0..1 range</span>
  <span class="token comment">// 还记得么？在remap算法中接触过</span>
  x <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> t1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// Evaluate polynomial</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step" tabindex="-1"><a class="header-anchor" href="#step" aria-hidden="true">#</a> step</h3><ul><li>step(a, b);当b &gt; a时， 返回1；当b &lt; a时，返回0</li></ul><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">float</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mix" tabindex="-1"><a class="header-anchor" href="#mix" aria-hidden="true">#</a> MIX</h3><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code><span class="token keyword">vec4</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token keyword">vec4</span> colorA<span class="token punctuation">,</span> <span class="token keyword">vec4</span> colorB<span class="token punctuation">,</span> <span class="token keyword">float</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> colorA <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> colorB <span class="token operator">*</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),l=[o];function c(i,u){return s(),a("div",null,l)}const k=n(p,[["render",c],["__file","GLSL函数.html.vue"]]);export{k as default};
