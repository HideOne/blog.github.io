const e=JSON.parse('{"key":"v-5dfe434e","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","category":["游戏"],"date":"2023-12-25T10:00:00.000Z","headerDepth":2,"description":"定义 使用特定原型实例来创建特定种类的对象，并且通过拷贝原型来创建新的对象 实例 假设要创建怪物 一般结构图如下 如图所示 每一种类型怪物都需要一个生成器 使用原型模式 class Monster { public: virtual ～Monster() {} virtual Monster* clone() = 0; // Other stuff... }; class Ghost : public Monster { public: Ghost(int health, int speed) : health_(health), speed_(speed) {} virtual Monster* clone() { return new Ghost(health_, speed_); } private: int health_; int speed_; }; // 生成器 class Spawner { public: Spawner(Monster* prototype) : prototype_(prototype) {} Monster* spawnMonster() { return prototype_-&gt;clone(); } private: Monster* prototype_; }; // 实例化怪物生成器 可以创建多种生成器 虚弱 强壮 ... Monster* ghostPrototype = new Ghost(15, 3); Spawner* ghostSpawner = new Spawner(ghostPrototype);","head":[["meta",{"property":"og:url","content":"https://blog.vipfreevpn.top/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"定义 使用特定原型实例来创建特定种类的对象，并且通过拷贝原型来创建新的对象 实例 假设要创建怪物 一般结构图如下 如图所示 每一种类型怪物都需要一个生成器 使用原型模式 class Monster { public: virtual ～Monster() {} virtual Monster* clone() = 0; // Other stuff... }; class Ghost : public Monster { public: Ghost(int health, int speed) : health_(health), speed_(speed) {} virtual Monster* clone() { return new Ghost(health_, speed_); } private: int health_; int speed_; }; // 生成器 class Spawner { public: Spawner(Monster* prototype) : prototype_(prototype) {} Monster* spawnMonster() { return prototype_-&gt;clone(); } private: Monster* prototype_; }; // 实例化怪物生成器 可以创建多种生成器 虚弱 强壮 ... Monster* ghostPrototype = new Ghost(15, 3); Spawner* ghostSpawner = new Spawner(ghostPrototype);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HideOne"}],["meta",{"property":"article:published_time","content":"2023-12-25T10:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T10:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HideOne\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]}]},{"level":2,"title":"json数据配置中采用原型模式","slug":"json数据配置中采用原型模式","link":"#json数据配置中采用原型模式","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"posts/设计模式/原型模式.md","localizedDate":"2023年12月25日","excerpt":"<h2> 定义</h2>\\n<p>使用特定原型实例来创建特定种类的对象，并且通过拷贝原型来创建新的对象</p>\\n<h2> 实例</h2>\\n<p>假设要创建怪物 一般结构图如下\\n</p>\\n<p>如图所示 每一种类型怪物都需要一个生成器</p>\\n<p>使用原型模式</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"language-c++\\"><code>class Monster\\n{\\npublic:\\n    virtual ～Monster() {}\\n    virtual Monster* clone() = 0;\\n\\n    // Other stuff...\\n};\\n\\nclass Ghost : public Monster {\\npublic:\\n    Ghost(int health, int speed)\\n    : health_(health),\\n    speed_(speed)\\n    {}\\n\\n    virtual Monster* clone()\\n    {\\n    return new Ghost(health_, speed_);\\n    }\\n\\nprivate:\\n    int health_;\\n    int speed_;\\n};\\n\\n// 生成器\\nclass Spawner\\n{\\npublic:\\n    Spawner(Monster* prototype)\\n    : prototype_(prototype)\\n    {}\\n\\n    Monster* spawnMonster()\\n    {\\n    return prototype_-&gt;clone();\\n    }\\nprivate:\\n    Monster* prototype_;\\n};\\n\\n// 实例化怪物生成器 可以创建多种生成器 虚弱 强壮 ...\\nMonster* ghostPrototype = new Ghost(15, 3);\\nSpawner* ghostSpawner = new Spawner(ghostPrototype);\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
