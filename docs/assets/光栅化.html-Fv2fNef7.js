import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,a as l}from"./app-yAc52h7c.js";const s="/assets/image-OPqDEBC5.png",r={},t=l(`<h1 id="光栅化" tabindex="-1"><a class="header-anchor" href="#光栅化" aria-hidden="true">#</a> 光栅化</h1><ul><li>把东西画在频幕上</li></ul><p>光栅化（Rasterization）是计算机图形学中将矢量图形（如点、线、三角形等几何图形）转换为光栅图形（即像素网格）的过程。这个过程通常用于实时渲染和显示三维图形到二维屏幕上。以下是光栅化的基本步骤和概念：</p><ol><li><p><strong>顶点处理（Vertex Processing）</strong>：首先，图形的顶点数据（如位置、颜色、纹理坐标等）通过顶点着色器进行处理，进行变换和投影。</p></li><li><p><strong>裁剪（Clipping）</strong>：将超出视口或视锥体外的部分裁剪掉，只保留需要绘制的部分。</p></li><li><p><strong>三角形设置（Triangle Setup）</strong>：计算三角形的边缘方程，准备进行光栅化。</p></li><li><p><strong>光栅化（Rasterization）</strong>：</p><ul><li><strong>采样</strong>：确定哪些像素（或片段）应该被绘制。通常使用边缘方程来判断一个像素是否在三角形内部。</li><li><strong>插值</strong>：对顶点属性（如颜色、纹理坐标）进行插值，以确定每个像素的最终值。</li></ul></li><li><p><strong>片段着色（Fragment Shading）</strong>：每个片段（像素）通过片段着色器进行处理，这里可以进行纹理映射、光照计算等。</p></li><li><p><strong>深度测试（Depth Testing）</strong>：决定哪些片段应该被绘制到屏幕上，通过比较深度缓冲区中的值。</p></li><li><p><strong>混合（Blending）</strong>：如果有透明或半透明的对象，可能需要进行混合操作来正确渲染透明度。</p></li></ol><p>光栅化是图形管线中的一个关键步骤，它决定了图形如何从三维空间转换到二维显示设备上。在实时图形应用中（如游戏、虚拟现实），光栅化需要非常高效，因为它直接影响渲染性能。现代GPU（图形处理单元）高度优化了这个过程，能够在极短的时间内处理大量的几何数据和像素。</p><h1 id="透视投影" tabindex="-1"><a class="header-anchor" href="#透视投影" aria-hidden="true">#</a> 透视投影</h1><p>透视投影（Perspective Projection）是计算机图形学和摄影中常用的一种投影方式，用于将三维场景映射到二维平面上，模拟人类视觉系统的深度感和透视效果。以下是透视投影的几个关键点：</p><ol><li><p><strong>消失点（Vanishing Points）</strong>：在透视投影中，平行线在无限远处的交汇点被称为消失点。水平线的消失点通常位于视平线（horizon line）上，垂直线和深度方向的线也可能有自己的消失点。</p></li><li><p><strong>视锥体（View Frustum）</strong>：透视投影定义了一个视锥体，任何在这个视锥体内的物体都会被投影到视平面上，视锥体之外的物体则被裁剪掉。</p></li><li><p><strong>视点（Viewpoint or Camera Position）</strong>：这是观察者（或虚拟摄像机）所在的位置，所有的投影计算都是基于这个点进行的。</p></li><li><p><strong>投影平面（Projection Plane）</strong>：这是实际进行投影的平面，通常与视点垂直。物体被投影到这个平面上。</p></li><li><p><strong>投影矩阵（Projection Matrix）</strong>：</p><ul><li>在计算机图形学中，使用投影矩阵将三维坐标转换到二维屏幕空间。透视投影矩阵会将远处的物体变小，近处的物体变大，产生一种深度的错觉。</li><li>透视投影矩阵通常涉及到视野（Field of View, FOV）、纵横比（Aspect Ratio）、近平面（Near Plane）和远平面（Far Plane）等参数。</li></ul></li><li><p><strong>透视缩放（Perspective Scaling）</strong>：物体离视点越远，在投影平面上看起来就越小，这种缩放效应模拟了人眼的视觉特性。</p></li><li><p><strong>线性透视（Linear Perspective）</strong>：这是透视投影的一种形式，遵循几何透视规律，物体的大小与其距离视点成反比。</p></li></ol><p>透视投影的主要特点是它能够很好地模拟人类的视觉感知，使得渲染的场景看起来更加真实和有深度感。相比之下，正交投影（Orthographic Projection）则不考虑距离，只保持物体的相对大小不变，因此不具备深度感。</p><p>在计算机图形学中，透视投影通常通过变换矩阵实现，这些矩阵会将三维坐标转换为标准化设备坐标（Normalized Device Coordinates, NDC），然后再经过视口变换映射到屏幕坐标。透视投影的计算和优化是图形渲染中的一个重要部分，特别是在需要高质量实时渲染的场景中。</p><h1 id="mvp" tabindex="-1"><a class="header-anchor" href="#mvp" aria-hidden="true">#</a> MVP</h1><p>在计算机图形学中，MVP是一个常见的缩写，代表的是三个关键的变换矩阵：</p><ol><li><p><strong>Model Matrix（模型矩阵）</strong>：</p><ul><li>模型矩阵用于将模型从其自身的坐标系统（局部坐标系）转换到世界坐标系。它可以包括缩放、旋转、平移等变换，定义了模型在世界空间中的位置、大小和朝向。</li></ul></li><li><p><strong>View Matrix（视图矩阵）</strong>：</p><ul><li>视图矩阵，也被称为摄像机矩阵或视图变换矩阵，将世界坐标系转换到相对于摄像机的位置和方向的坐标系中。视图矩阵实质上是将摄像机移动到原点并使其朝向负Z轴方向的变换。</li></ul></li><li><p><strong>Projection Matrix（投影矩阵）</strong>：</p><ul><li>投影矩阵将视图空间中的点转换到裁剪空间（也称为标准化设备坐标，NDC），这个空间是一个立方体，范围通常是[-1, 1]在每个轴上。投影矩阵决定了如何将三维场景投影到二维平面上，常见的有透视投影和正交投影。</li></ul></li></ol><p>这些矩阵通常是按顺序应用的：</p><ul><li><strong>Model</strong> → <strong>View</strong> → <strong>Projection</strong></li></ul><p>这个顺序意味着：</p><ul><li>首先，模型矩阵将顶点从模型空间转换到世界空间。</li><li>然后，视图矩阵将世界空间的点转换到相对于摄像机的空间。</li><li>最后，投影矩阵将这些点转换到裁剪空间。</li></ul><p>在实际的渲染管线中，顶点着色器（Vertex Shader）通常会接收顶点数据并进行这些变换：</p><div class="language-glsl line-numbers-mode" data-ext="glsl"><pre class="language-glsl"><code>gl_Position <span class="token operator">=</span> projectionMatrix <span class="token operator">*</span> viewMatrix <span class="token operator">*</span> modelMatrix <span class="token operator">*</span> <span class="token keyword">vec4</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>position</code> 是顶点在模型空间中的位置，<code>gl_Position</code> 是最终在裁剪空间中的位置。</p><p>MVP矩阵的组合是实时图形渲染中的基础步骤，它决定了如何将三维模型正确地投影到二维屏幕上，同时考虑了模型自身的变换、摄像机的位置和朝向以及投影方式。不同的渲染引擎或API（如OpenGL、DirectX、WebGL等）可能有不同的方式来设置和应用这些矩阵，但核心概念是相同的。</p><p>将[-1,1]转到 [0,width] [0,heigh] <img src="`+s+'" alt="alt text" loading="lazy"></p><h1 id="三角形" tabindex="-1"><a class="header-anchor" href="#三角形" aria-hidden="true">#</a> 三角形</h1><p>三角形在计算机图形学中具有基础性和重要性的地位，以下是几点说明其根本性：</p><ol><li><p><strong>几何简单性</strong>：</p><ul><li>三角形是三维空间中最简单的多边形，只有三个顶点和三条边，这使得其几何计算相对简单，适合于高效的数学处理。</li></ul></li><li><p><strong>平面性</strong>：</p><ul><li>任何三角形都完全平面，不存在弯曲或扭曲，这意味着在光栅化或投影过程中，三角形内的点可以简单地通过线性插值来确定。</li></ul></li><li><p><strong>光栅化友好</strong>：</p><ul><li>三角形可以被很容易地光栅化。光栅化三角形只需要判断像素是否在三角形内部，这种判断可以通过边缘方程或重心坐标来进行。</li></ul></li><li><p><strong>投影和裁剪</strong>：</p><ul><li>在透视投影和视锥体裁剪过程中，三角形保持其完整性，不会像四边形或更复杂的多边形那样可能被分割成多个部分。</li></ul></li><li><p><strong>曲面逼近</strong>：</p><ul><li>复杂的曲面可以通过多个三角形来逼近（称为三角剖分），这允许我们使用简单图形来表示复杂的几何形状。</li></ul></li><li><p><strong>顶点属性插值</strong>：</p><ul><li>三角形内的顶点属性（如颜色、纹理坐标、法线等）可以使用重心坐标进行线性插值，这在着色过程中非常有用。</li></ul></li><li><p><strong>硬件加速</strong>：</p><ul><li>现代图形硬件（GPU）通常优化了对三角形的处理，包括光栅化、着色和深度测试等操作。</li></ul></li><li><p><strong>一致性</strong>：</p><ul><li>使用三角形作为基本渲染单位，确保了图形渲染的统一性和可预测性，无论是简单还是复杂的场景。</li></ul></li><li><p><strong>拓扑结构</strong>：</p><ul><li>三角形提供了稳定的拓扑结构，不会出现像四边形可能出现的退化情况（如变成线或点）。</li></ul></li><li><p><strong>数学模型</strong>：</p><ul><li>三角形在数学上有着完备的描述，包括重心坐标、面积计算、法线计算等，这些都为图形计算提供了坚实的基础。</li></ul></li><li><p><strong>物理模拟</strong>：</p><ul><li>在物理引擎中，三角形网格常用于碰撞检测和物理模拟，因为其简单性和计算效率。</li></ul></li></ol><p>由于这些特性，三角形成为图形渲染的基本单位，任何复杂的模型最终都会被分解成三角形集合进行渲染。这使得三角形在计算机图形学中成为一个根本性的概念，支持了从基本的几何变换到高级渲染技术的所有方面。</p><h1 id="采样" tabindex="-1"><a class="header-anchor" href="#采样" aria-hidden="true">#</a> 采样</h1><p>函数离散化的过程</p><p>在计算机图形学中，采样（Sampling）指的是从连续或离散信号中获取有限数量的数据点，以便进行图像生成或处理。“A Simple Approach” 通常意味着采用直接且容易实现的方法来完成采样，而不是复杂的数学模型或优化算法。</p><h1 id="锯齿-aliasing" tabindex="-1"><a class="header-anchor" href="#锯齿-aliasing" aria-hidden="true">#</a> 锯齿（Aliasing）</h1><p><strong>Aliasing (Jaggies)</strong> 是计算机图形学中的一种常见现象，通常出现在图像处理或渲染过程中，尤其是在低分辨率显示或图像采样不足时。它会导致图像中出现锯齿状或不规则的边缘，通常被称为“<strong>jaggies</strong>”。这种现象主要是由于采样不充分或对连续信号的离散表示造成的。</p><h3 id="aliasing的成因" tabindex="-1"><a class="header-anchor" href="#aliasing的成因" aria-hidden="true">#</a> <strong>Aliasing的成因</strong></h3><p>在计算机图形学中，<strong>采样</strong>（Sampling）是将连续图像或几何形状转化为数字形式的过程。当我们用有限的像素数来表示连续图形或曲线时，如果采样不足，特别是在边缘或高频细节的区域，可能无法准确地捕捉到图像的细节。这时，图像的边缘就可能出现锯齿状的伪影——即<strong>Aliasing</strong>。</p><hr><h3 id="aliasing的具体表现" tabindex="-1"><a class="header-anchor" href="#aliasing的具体表现" aria-hidden="true">#</a> <strong>Aliasing的具体表现</strong></h3><ol><li><strong>锯齿边缘（Jaggies）</strong>：物体的直线或曲线边缘变得不平滑，形成一系列阶梯状的伪影。</li><li><strong>频率混叠</strong>：在图像中，高频细节（如斜线或曲线）会“折叠”成低频模式，造成失真。</li><li><strong>摩尔纹（Moire Patterns）</strong>：当低分辨率图像的细节过度采样时，可能会产生类似于干扰条纹的图案。</li></ol><hr><h3 id="aliasing的原因" tabindex="-1"><a class="header-anchor" href="#aliasing的原因" aria-hidden="true">#</a> <strong>Aliasing的原因</strong></h3><ol><li><strong>采样率不足</strong>：如果采样的分辨率不足，无法捕捉到信号的所有细节，特别是在图像的高频区域，容易出现aliasing。</li><li><strong>离散化误差</strong>：在将连续的几何或颜色信息转化为离散数据时，由于有限的像素或采样点，会产生误差。</li><li><strong>信号频率过高</strong>：如果图像中的细节（比如边缘的变化）频率高于采样的分辨率，无法正确表示这些细节，导致aliasing。</li></ol><hr><h3 id="aliasing的解决方法" tabindex="-1"><a class="header-anchor" href="#aliasing的解决方法" aria-hidden="true">#</a> <strong>Aliasing的解决方法</strong></h3><p>为了减少或消除aliasing，通常采用以下几种技术：</p><h4 id="_1-超采样-supersampling" tabindex="-1"><a class="header-anchor" href="#_1-超采样-supersampling" aria-hidden="true">#</a> <strong>1. 超采样（Supersampling）</strong></h4><ul><li><strong>方法</strong>：超采样是通过增加每个像素的采样数量来减轻aliasing。例如，每个像素取多个样本，然后计算这些样本的平均值，从而获得更平滑的结果。</li><li><strong>优点</strong>：能有效减少锯齿效果。</li><li><strong>缺点</strong>：计算量增加，需要更多的处理资源。</li></ul><h4 id="_2-多重采样抗锯齿-msaa-multi-sample-anti-aliasing" tabindex="-1"><a class="header-anchor" href="#_2-多重采样抗锯齿-msaa-multi-sample-anti-aliasing" aria-hidden="true">#</a> <strong>2. 多重采样抗锯齿（MSAA, Multi-Sample Anti-Aliasing）</strong></h4><ul><li><strong>方法</strong>：MSAA是一种抗锯齿技术，通过在多个点上采样每个像素，然后根据这些样本的平均值来确定最终颜色。与超采样相比，MSAA通常减少了计算量，因为它只对像素的边缘部分进行额外的采样。</li><li><strong>优点</strong>：计算效率较高，适用于实时渲染。</li><li><strong>缺点</strong>：相比超采样，效果略逊。</li></ul><h4 id="_3-fxaa-fast-approximate-anti-aliasing" tabindex="-1"><a class="header-anchor" href="#_3-fxaa-fast-approximate-anti-aliasing" aria-hidden="true">#</a> <strong>3. FXAA (Fast Approximate Anti-Aliasing)</strong></h4><ul><li><strong>方法</strong>：FXAA是一种基于图像后处理的抗锯齿方法，通过对图像进行平滑处理来减少锯齿。它的处理速度快，适用于实时渲染。</li><li><strong>优点</strong>：非常高效，适用于性能有限的设备。</li><li><strong>缺点</strong>：效果不如其他方法如MSAA或SSAA精细。</li></ul><h4 id="_4-temporal-anti-aliasing-taa" tabindex="-1"><a class="header-anchor" href="#_4-temporal-anti-aliasing-taa" aria-hidden="true">#</a> <strong>4. Temporal Anti-Aliasing (TAA)</strong></h4><ul><li><strong>方法</strong>：TAA利用时间信息，通过对多个帧之间的像素值进行加权平均，从而减少aliasing。它适合于动态图像。</li><li><strong>优点</strong>：能在动态场景中提供平滑效果，减少噪点和锯齿。</li><li><strong>缺点</strong>：可能会出现运动模糊或拖影现象。</li></ul><h4 id="_5-采样率调整-adaptive-sampling" tabindex="-1"><a class="header-anchor" href="#_5-采样率调整-adaptive-sampling" aria-hidden="true">#</a> <strong>5. 采样率调整（Adaptive Sampling）</strong></h4><ul><li><strong>方法</strong>：在某些区域增加采样密度，而在其他区域降低采样密度。通常在图像的细节较多的区域使用更密集的采样，以便更准确地表示。</li><li><strong>优点</strong>：能够提高渲染效率，同时减少 aliasing。</li><li><strong>缺点</strong>：需要额外的计算和算法调整。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><p><strong>Aliasing</strong>（锯齿效应）是由于采样不足或分辨率低导致图像中出现的伪影现象，特别是在图像的边缘和细节部分。为了减轻aliasing效果，常用的技术包括超采样、多重采样抗锯齿、FXAA、TAA等。虽然这些方法有不同的优缺点，但它们的共同目标是通过增加采样或使用后处理技术来使图像边缘变得更加平滑，消除锯齿状伪影。</p>',55),o=[t];function e(g,p){return n(),a("div",null,o)}const c=i(r,[["render",e],["__file","光栅化.html.vue"]]);export{c as default};
