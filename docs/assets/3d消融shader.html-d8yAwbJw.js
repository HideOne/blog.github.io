const t=JSON.parse('{"key":"v-4c252863","path":"/posts/%E6%B8%B8%E6%88%8F/Shader/shader%E5%BA%94%E7%94%A8/3d%E6%B6%88%E8%9E%8Dshader.html","title":"GLSL函数","lang":"zh-CN","frontmatter":{"title":"GLSL函数","category":["shader应用"],"date":"2024-05-17T12:04:50.000Z","description":"smoothstep smoothstep可以用来生成0到1的平滑过渡值，它也叫平滑阶梯函数 float smoothstep(float t1, float t2, float x) { // Scale, bias and saturate x to 0..1 range // 还记得么？在remap算法中接触过 x = clamp((x - t1) / (t2 - t1), 0.0, 1.0); // Evaluate polynomial return x * x * (3 - 2 * x); }","head":[["meta",{"property":"og:url","content":"https://blog.vipfreevpn.top/posts/%E6%B8%B8%E6%88%8F/Shader/shader%E5%BA%94%E7%94%A8/3d%E6%B6%88%E8%9E%8Dshader.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"GLSL函数"}],["meta",{"property":"og:description","content":"smoothstep smoothstep可以用来生成0到1的平滑过渡值，它也叫平滑阶梯函数 float smoothstep(float t1, float t2, float x) { // Scale, bias and saturate x to 0..1 range // 还记得么？在remap算法中接触过 x = clamp((x - t1) / (t2 - t1), 0.0, 1.0); // Evaluate polynomial return x * x * (3 - 2 * x); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T14:02:31.000Z"}],["meta",{"property":"article:author","content":"HideOne"}],["meta",{"property":"article:published_time","content":"2024-05-17T12:04:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T14:02:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GLSL函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-17T12:04:50.000Z\\",\\"dateModified\\":\\"2024-05-18T14:02:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HideOne\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"smoothstep","slug":"smoothstep","link":"#smoothstep","children":[]},{"level":3,"title":"step","slug":"step","link":"#step","children":[]},{"level":3,"title":"MIX","slug":"mix","link":"#mix","children":[]}],"git":{"createdTime":1716023636000,"updatedTime":1716040951000,"contributors":[{"name":"HideOne","email":"844085696@qq.com","commits":2}]},"readingTime":{"minutes":0.48,"words":143},"filePathRelative":"posts/游戏/Shader/shader应用/3d消融shader.md","localizedDate":"2024年5月17日","excerpt":"<h3> smoothstep</h3>\\n<ul>\\n<li>smoothstep可以用来生成0到1的平滑过渡值，它也叫平滑阶梯函数\\n</li>\\n</ul>\\n<div class=\\"language-glsl line-numbers-mode\\" data-ext=\\"glsl\\"><pre class=\\"language-glsl\\"><code><span class=\\"token keyword\\">float</span> <span class=\\"token function\\">smoothstep</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">float</span> t1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span> t2<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// Scale, bias and saturate x to 0..1 range</span>\\n  <span class=\\"token comment\\">// 还记得么？在remap算法中接触过</span>\\n  x <span class=\\"token operator\\">=</span> <span class=\\"token function\\">clamp</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">-</span> t1<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span>t2 <span class=\\"token operator\\">-</span> t1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1.0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n  <span class=\\"token comment\\">// Evaluate polynomial</span>\\n  <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">*</span> x <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
