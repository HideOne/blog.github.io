const e=JSON.parse('{"key":"v-0065468b","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%B2%99%E7%9B%92%E6%A8%A1%E5%BC%8F.html","title":"沙盒模式","lang":"zh-CN","frontmatter":{"title":"沙盒模式","category":["游戏"],"date":"2023-12-25T17:00:00.000Z","headerDepth":2,"description":"什么是 沙盒模式是运用在多数代码库里、甚至游戏之外的一种非常简单通用的模式。如果你正在部署一个非虚的受保护方法，那么你很有可能正在使用与之相类似的模式。 使用场景 你有一个带有大量子类的基类。 基类能够提供所有子类可能需要执行的操作集合。 在子类之间有重叠的代码，你希望在它们之间更简便地共享代码。 你希望使这些继承类与程序其他代码之间的耦合最小化。 为什么使用 近些年“继承”一词被部分程序圈所诟病，原因之一是基类会衍生越来越多的代码。这个模式尤其受这个因素的影响","head":[["meta",{"property":"og:url","content":"https://blog.vipfreevpn.top/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%B2%99%E7%9B%92%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"沙盒模式"}],["meta",{"property":"og:description","content":"什么是 沙盒模式是运用在多数代码库里、甚至游戏之外的一种非常简单通用的模式。如果你正在部署一个非虚的受保护方法，那么你很有可能正在使用与之相类似的模式。 使用场景 你有一个带有大量子类的基类。 基类能够提供所有子类可能需要执行的操作集合。 在子类之间有重叠的代码，你希望在它们之间更简便地共享代码。 你希望使这些继承类与程序其他代码之间的耦合最小化。 为什么使用 近些年“继承”一词被部分程序圈所诟病，原因之一是基类会衍生越来越多的代码。这个模式尤其受这个因素的影响"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HideOne"}],["meta",{"property":"article:published_time","content":"2023-12-25T17:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"沙盒模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T17:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HideOne\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是","slug":"什么是","link":"#什么是","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"为什么使用","slug":"为什么使用","link":"#为什么使用","children":[]},{"level":2,"title":"怎么用","slug":"怎么用","link":"#怎么用","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.16,"words":348},"filePathRelative":"posts/设计模式/沙盒模式.md","localizedDate":"2023年12月26日","excerpt":"<h2> 什么是</h2>\\n<p>沙盒模式是运用在多数代码库里、甚至游戏之外的一种非常简单通用的模式。如果你正在部署一个非虚的受保护方法，那么你很有可能正在使用与之相类似的模式。</p>\\n<h2> 使用场景</h2>\\n<ul>\\n<li>你有一个带有大量子类的基类。</li>\\n<li>基类能够提供所有子类可能需要执行的操作集合。</li>\\n<li>在子类之间有重叠的代码，你希望在它们之间更简便地共享代码。</li>\\n<li>你希望使这些继承类与程序其他代码之间的耦合最小化。</li>\\n</ul>\\n<h2> 为什么使用</h2>\\n<p>近些年“继承”一词被部分程序圈所诟病，原因之一是基类会衍生越来越多的代码。这个模式尤其受这个因素的影响</p>","autoDesc":true}');export{e as data};
