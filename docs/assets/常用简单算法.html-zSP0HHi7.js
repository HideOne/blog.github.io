const n=JSON.parse(`{"key":"v-220d54e7","path":"/posts/%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95.html","title":"常用简单算法","lang":"zh-CN","frontmatter":{"title":"常用简单算法","category":["算法"],"date":"2024-05-28T08:22:28.000Z","description":"字符串相似度 /** 字符串相似度（编辑距离算法） */ private _similarityEditDist(vS_: string, v2S_: string): number { let vLenN = vS_.length; let v2LenN = v2S_.length; // 安检 if (vLenN === 0) { return v2LenN; } if (v2LenN === 0) { return vLenN; } let distNss: number[][] = []; // 二维距离表格 for (let kN = 0; kN &lt;= vLenN; kN++) { distNss[kN] = []; distNss[kN][0] = kN; } for (let kN = 0; kN &lt;= v2LenN; kN++) { distNss[0][kN] = kN; } // 计算每个格子距离 let vCurrS: string; let v2CurrS: string; for (let kN = 1; kN &lt;= vLenN; kN++) { vCurrS = vS_.charAt(kN - 1); for (let k2N = 1; k2N &lt;= v2LenN; k2N++) { v2CurrS = v2S_.charAt(k2N - 1); distNss[kN][k2N] = Math.min( distNss[kN - 1][k2N] + 1, distNss[kN][k2N - 1] + 1, distNss[kN - 1][k2N - 1] + (vCurrS === v2CurrS ? 0 : 1) ); } } // 返回右下角距离的比例 return Number((1 - distNss[vLenN][v2LenN] / Math.max(vS_.length, v2S_.length)).toFixed(4)); } /** 模糊匹配（多个源字符串时返回相识度最高的字符串） */ private _fuzzyMatch(args_: string | string[], keyS_: string, minSimileN_ = 0): string | null { let sourceSS: string[]; if (typeof args_ === 'string') { sourceSS = [args_]; } else { sourceSS = args_; } let matchResultSS: string[] = []; let keySS = keyS_.split(''); let indexN: number; sourceSS.forEach((vS) =&gt; { indexN = -1; for (let k2N = 0; k2N &lt; keySS.length; ++k2N) { // 有一个关键字都没匹配到，则没有匹配到数据 if (vS.indexOf(keySS[k2N]) &lt; 0) { break; } else { const reg = RegExp(\`\${keySS[k2N]}\`, 'g'); let execResult: RegExpExecArray | null; while ((execResult = reg.exec(vS)) !== null) { if (execResult.index &gt; indexN) { indexN = execResult.index; if (k2N === keySS.length - 1) { matchResultSS.push(vS); return; } break; } } } } }); if (!matchResultSS.length) { return null; } // 返回相识度最高的字符串 else { matchResultSS.sort((vaS: string, vbS: string) =&gt; this._similarityEditDist(vbS, keyS_) - this._similarityEditDist(vaS, keyS_)); return this._similarityEditDist(matchResultSS[0], keyS_) &gt;= minSimileN_ ? matchResultSS[0] : keyS_; } }","head":[["meta",{"property":"og:url","content":"https://blog.vipfreevpn.top/posts/%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"常用简单算法"}],["meta",{"property":"og:description","content":"字符串相似度 /** 字符串相似度（编辑距离算法） */ private _similarityEditDist(vS_: string, v2S_: string): number { let vLenN = vS_.length; let v2LenN = v2S_.length; // 安检 if (vLenN === 0) { return v2LenN; } if (v2LenN === 0) { return vLenN; } let distNss: number[][] = []; // 二维距离表格 for (let kN = 0; kN &lt;= vLenN; kN++) { distNss[kN] = []; distNss[kN][0] = kN; } for (let kN = 0; kN &lt;= v2LenN; kN++) { distNss[0][kN] = kN; } // 计算每个格子距离 let vCurrS: string; let v2CurrS: string; for (let kN = 1; kN &lt;= vLenN; kN++) { vCurrS = vS_.charAt(kN - 1); for (let k2N = 1; k2N &lt;= v2LenN; k2N++) { v2CurrS = v2S_.charAt(k2N - 1); distNss[kN][k2N] = Math.min( distNss[kN - 1][k2N] + 1, distNss[kN][k2N - 1] + 1, distNss[kN - 1][k2N - 1] + (vCurrS === v2CurrS ? 0 : 1) ); } } // 返回右下角距离的比例 return Number((1 - distNss[vLenN][v2LenN] / Math.max(vS_.length, v2S_.length)).toFixed(4)); } /** 模糊匹配（多个源字符串时返回相识度最高的字符串） */ private _fuzzyMatch(args_: string | string[], keyS_: string, minSimileN_ = 0): string | null { let sourceSS: string[]; if (typeof args_ === 'string') { sourceSS = [args_]; } else { sourceSS = args_; } let matchResultSS: string[] = []; let keySS = keyS_.split(''); let indexN: number; sourceSS.forEach((vS) =&gt; { indexN = -1; for (let k2N = 0; k2N &lt; keySS.length; ++k2N) { // 有一个关键字都没匹配到，则没有匹配到数据 if (vS.indexOf(keySS[k2N]) &lt; 0) { break; } else { const reg = RegExp(\`\${keySS[k2N]}\`, 'g'); let execResult: RegExpExecArray | null; while ((execResult = reg.exec(vS)) !== null) { if (execResult.index &gt; indexN) { indexN = execResult.index; if (k2N === keySS.length - 1) { matchResultSS.push(vS); return; } break; } } } } }); if (!matchResultSS.length) { return null; } // 返回相识度最高的字符串 else { matchResultSS.sort((vaS: string, vbS: string) =&gt; this._similarityEditDist(vbS, keyS_) - this._similarityEditDist(vaS, keyS_)); return this._similarityEditDist(matchResultSS[0], keyS_) &gt;= minSimileN_ ? matchResultSS[0] : keyS_; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-28T00:23:18.000Z"}],["meta",{"property":"article:author","content":"HideOne"}],["meta",{"property":"article:published_time","content":"2024-05-28T08:22:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-28T00:23:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用简单算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-28T08:22:28.000Z\\",\\"dateModified\\":\\"2024-05-28T00:23:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HideOne\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"字符串相似度","slug":"字符串相似度","link":"#字符串相似度","children":[]}],"git":{"createdTime":1716855798000,"updatedTime":1716855798000,"contributors":[{"name":"HideOne","email":"844085696@qq.com","commits":1}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"posts/算法/常用简单算法.md","localizedDate":"2024年5月28日","excerpt":"<h2> 字符串相似度</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token doc-comment comment\\">/** 字符串相似度（编辑距离算法） */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token function\\">_similarityEditDist</span><span class=\\"token punctuation\\">(</span>vS_<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> v2S_<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">let</span> vLenN <span class=\\"token operator\\">=</span> vS_<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">let</span> v2LenN <span class=\\"token operator\\">=</span> v2S_<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 安检</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>vLenN <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> v2LenN<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>v2LenN <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> vLenN<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">let</span> distNss<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 二维距离表格</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> kN <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> kN <span class=\\"token operator\\">&lt;=</span> vLenN<span class=\\"token punctuation\\">;</span> kN<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            distNss<span class=\\"token punctuation\\">[</span>kN<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            distNss<span class=\\"token punctuation\\">[</span>kN<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> kN<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> kN <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> kN <span class=\\"token operator\\">&lt;=</span> v2LenN<span class=\\"token punctuation\\">;</span> kN<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            distNss<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>kN<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> kN<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 计算每个格子距离</span>\\n        <span class=\\"token keyword\\">let</span> vCurrS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">let</span> v2CurrS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> kN <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> kN <span class=\\"token operator\\">&lt;=</span> vLenN<span class=\\"token punctuation\\">;</span> kN<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            vCurrS <span class=\\"token operator\\">=</span> vS_<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>kN <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> k2N <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> k2N <span class=\\"token operator\\">&lt;=</span> v2LenN<span class=\\"token punctuation\\">;</span> k2N<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                v2CurrS <span class=\\"token operator\\">=</span> v2S_<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>k2N <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                distNss<span class=\\"token punctuation\\">[</span>kN<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>k2N<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>\\n                    distNss<span class=\\"token punctuation\\">[</span>kN <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>k2N<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n                    distNss<span class=\\"token punctuation\\">[</span>kN<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>k2N <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n                    distNss<span class=\\"token punctuation\\">[</span>kN <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>k2N <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>vCurrS <span class=\\"token operator\\">===</span> v2CurrS <span class=\\"token operator\\">?</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 返回右下角距离的比例</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">-</span> distNss<span class=\\"token punctuation\\">[</span>vLenN<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>v2LenN<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">/</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>vS_<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">,</span> v2S_<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toFixed</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token doc-comment comment\\">/** 模糊匹配（多个源字符串时返回相识度最高的字符串） */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token function\\">_fuzzyMatch</span><span class=\\"token punctuation\\">(</span>args_<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> keyS_<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> minSimileN_ <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">let</span> sourceSS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> args_ <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            sourceSS <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>args_<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            sourceSS <span class=\\"token operator\\">=</span> args_<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">let</span> matchResultSS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">let</span> keySS <span class=\\"token operator\\">=</span> keyS_<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">split</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">let</span> indexN<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n        sourceSS<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>vS<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            indexN <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> k2N <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> k2N <span class=\\"token operator\\">&lt;</span> keySS<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>k2N<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 有一个关键字都没匹配到，则没有匹配到数据</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>vS<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span>keySS<span class=\\"token punctuation\\">[</span>k2N<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">const</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token function\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>keySS<span class=\\"token punctuation\\">[</span>k2N<span class=\\"token punctuation\\">]</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'g'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">let</span> execResult<span class=\\"token operator\\">:</span> RegExpExecArray <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>execResult <span class=\\"token operator\\">=</span> reg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span>vS<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>execResult<span class=\\"token punctuation\\">.</span>index <span class=\\"token operator\\">&gt;</span> indexN<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                            indexN <span class=\\"token operator\\">=</span> execResult<span class=\\"token punctuation\\">.</span>index<span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>k2N <span class=\\"token operator\\">===</span> keySS<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                                matchResultSS<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>vS<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                                <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token punctuation\\">}</span>\\n                            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>matchResultSS<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 返回相识度最高的字符串</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            matchResultSS<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>vaS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> vbS<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_similarityEditDist</span><span class=\\"token punctuation\\">(</span>vbS<span class=\\"token punctuation\\">,</span> keyS_<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_similarityEditDist</span><span class=\\"token punctuation\\">(</span>vaS<span class=\\"token punctuation\\">,</span> keyS_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_similarityEditDist</span><span class=\\"token punctuation\\">(</span>matchResultSS<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> keyS_<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;=</span> minSimileN_ <span class=\\"token operator\\">?</span> matchResultSS<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> keyS_<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
